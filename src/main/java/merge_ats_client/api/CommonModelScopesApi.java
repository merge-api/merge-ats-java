/*
 * Merge ATS API
 * The unified API for building rich integrations with multiple Applicant Tracking System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package merge_ats_client.api;

import merge_ats_client.ApiCallback;
import merge_ats_client.ApiClient;
import merge_ats_client.ApiException;
import merge_ats_client.ApiResponse;
import merge_ats_client.Configuration;
import merge_ats_client.Pair;
import merge_ats_client.ProgressRequestBody;
import merge_ats_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import merge_ats_client.model.CommonModelScopes;
import merge_ats_client.model.CommonModelScopesUpdateSerializer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommonModelScopesApi {
    private ApiClient localVarApiClient;

    public CommonModelScopesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommonModelScopesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for commonModelScopesRetrieve
     * @param integrationSlug Slug of the integration to fetch (optional)
     * @param linkedAccountId ID of specific linked account to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commonModelScopesRetrieveCall(String integrationSlug, String linkedAccountId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/common-model-scopes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (integrationSlug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_slug", integrationSlug));
        }

        if (linkedAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linked_account_id", linkedAccountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commonModelScopesRetrieveValidateBeforeCall(String integrationSlug, String linkedAccountId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = commonModelScopesRetrieveCall(integrationSlug, linkedAccountId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Fetch the configuration of what data is saved by Merge when syncing. Common model scopes are set as a default across all linked accounts, but can be updated to have greater granularity per integration or account.
     * @param integrationSlug Slug of the integration to fetch (optional)
     * @param linkedAccountId ID of specific linked account to fetch (optional)
     * @return CommonModelScopes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CommonModelScopes commonModelScopesRetrieve(String integrationSlug, String linkedAccountId) throws ApiException {
        ApiResponse<CommonModelScopes> localVarResp = commonModelScopesRetrieveWithHttpInfo(integrationSlug, linkedAccountId);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch the configuration of what data is saved by Merge when syncing. Common model scopes are set as a default across all linked accounts, but can be updated to have greater granularity per integration or account.
     * @param integrationSlug Slug of the integration to fetch (optional)
     * @param linkedAccountId ID of specific linked account to fetch (optional)
     * @return ApiResponse&lt;CommonModelScopes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommonModelScopes> commonModelScopesRetrieveWithHttpInfo(String integrationSlug, String linkedAccountId) throws ApiException {
        okhttp3.Call localVarCall = commonModelScopesRetrieveValidateBeforeCall(integrationSlug, linkedAccountId, null);
        Type localVarReturnType = new TypeToken<CommonModelScopes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch the configuration of what data is saved by Merge when syncing. Common model scopes are set as a default across all linked accounts, but can be updated to have greater granularity per integration or account.
     * @param integrationSlug Slug of the integration to fetch (optional)
     * @param linkedAccountId ID of specific linked account to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commonModelScopesRetrieveAsync(String integrationSlug, String linkedAccountId, final ApiCallback<CommonModelScopes> _callback) throws ApiException {

        okhttp3.Call localVarCall = commonModelScopesRetrieveValidateBeforeCall(integrationSlug, linkedAccountId, _callback);
        Type localVarReturnType = new TypeToken<CommonModelScopes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for commonModelScopesUpdate
     * @param commonModelScopesUpdateSerializer  (required)
     * @param integrationSlug Slug of the integration to fetch (optional)
     * @param linkedAccountId ID of specific linked account to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commonModelScopesUpdateCall(CommonModelScopesUpdateSerializer commonModelScopesUpdateSerializer, String integrationSlug, String linkedAccountId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = commonModelScopesUpdateSerializer;

        // create path and map variables
        String localVarPath = "/common-model-scopes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (integrationSlug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_slug", integrationSlug));
        }

        if (linkedAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linked_account_id", linkedAccountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commonModelScopesUpdateValidateBeforeCall(CommonModelScopesUpdateSerializer commonModelScopesUpdateSerializer, String integrationSlug, String linkedAccountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'commonModelScopesUpdateSerializer' is set
        if (commonModelScopesUpdateSerializer == null) {
            throw new ApiException("Missing the required parameter 'commonModelScopesUpdateSerializer' when calling commonModelScopesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = commonModelScopesUpdateCall(commonModelScopesUpdateSerializer, integrationSlug, linkedAccountId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update the configuration of what data is saved by Merge when syncing. Common model scopes are set as a default across all linked accounts, but can be updated to have greater granularity per integration or account.
     * @param commonModelScopesUpdateSerializer  (required)
     * @param integrationSlug Slug of the integration to fetch (optional)
     * @param linkedAccountId ID of specific linked account to fetch (optional)
     * @return CommonModelScopes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CommonModelScopes commonModelScopesUpdate(CommonModelScopesUpdateSerializer commonModelScopesUpdateSerializer, String integrationSlug, String linkedAccountId) throws ApiException {
        ApiResponse<CommonModelScopes> localVarResp = commonModelScopesUpdateWithHttpInfo(commonModelScopesUpdateSerializer, integrationSlug, linkedAccountId);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the configuration of what data is saved by Merge when syncing. Common model scopes are set as a default across all linked accounts, but can be updated to have greater granularity per integration or account.
     * @param commonModelScopesUpdateSerializer  (required)
     * @param integrationSlug Slug of the integration to fetch (optional)
     * @param linkedAccountId ID of specific linked account to fetch (optional)
     * @return ApiResponse&lt;CommonModelScopes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommonModelScopes> commonModelScopesUpdateWithHttpInfo(CommonModelScopesUpdateSerializer commonModelScopesUpdateSerializer, String integrationSlug, String linkedAccountId) throws ApiException {
        okhttp3.Call localVarCall = commonModelScopesUpdateValidateBeforeCall(commonModelScopesUpdateSerializer, integrationSlug, linkedAccountId, null);
        Type localVarReturnType = new TypeToken<CommonModelScopes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the configuration of what data is saved by Merge when syncing. Common model scopes are set as a default across all linked accounts, but can be updated to have greater granularity per integration or account.
     * @param commonModelScopesUpdateSerializer  (required)
     * @param integrationSlug Slug of the integration to fetch (optional)
     * @param linkedAccountId ID of specific linked account to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commonModelScopesUpdateAsync(CommonModelScopesUpdateSerializer commonModelScopesUpdateSerializer, String integrationSlug, String linkedAccountId, final ApiCallback<CommonModelScopes> _callback) throws ApiException {

        okhttp3.Call localVarCall = commonModelScopesUpdateValidateBeforeCall(commonModelScopesUpdateSerializer, integrationSlug, linkedAccountId, _callback);
        Type localVarReturnType = new TypeToken<CommonModelScopes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
