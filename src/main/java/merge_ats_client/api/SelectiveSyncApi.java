/*
 * Merge ATS API
 * The unified API for building rich integrations with multiple Applicant Tracking System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package merge_ats_client.api;

import merge_ats_client.ApiCallback;
import merge_ats_client.ApiClient;
import merge_ats_client.ApiException;
import merge_ats_client.ApiResponse;
import merge_ats_client.Configuration;
import merge_ats_client.Pair;
import merge_ats_client.ProgressRequestBody;
import merge_ats_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import merge_ats_client.model.LinkedAccountSelectiveSyncConfiguration;
import merge_ats_client.model.LinkedAccountSelectiveSyncConfigurationListRequest;
import merge_ats_client.model.PaginatedConditionSchemaList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SelectiveSyncApi {
    private ApiClient localVarApiClient;

    public SelectiveSyncApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SelectiveSyncApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for selectiveSyncConfigurationsList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selectiveSyncConfigurationsListCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/selective-sync/configurations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accountTokenAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selectiveSyncConfigurationsListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = selectiveSyncConfigurationsListCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Get a linked account&#39;s selective syncs.
     * @return List&lt;LinkedAccountSelectiveSyncConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<LinkedAccountSelectiveSyncConfiguration> selectiveSyncConfigurationsList() throws ApiException {
        ApiResponse<List<LinkedAccountSelectiveSyncConfiguration>> localVarResp = selectiveSyncConfigurationsListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get a linked account&#39;s selective syncs.
     * @return ApiResponse&lt;List&lt;LinkedAccountSelectiveSyncConfiguration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LinkedAccountSelectiveSyncConfiguration>> selectiveSyncConfigurationsListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = selectiveSyncConfigurationsListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<LinkedAccountSelectiveSyncConfiguration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a linked account&#39;s selective syncs.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selectiveSyncConfigurationsListAsync(final ApiCallback<List<LinkedAccountSelectiveSyncConfiguration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = selectiveSyncConfigurationsListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<LinkedAccountSelectiveSyncConfiguration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for selectiveSyncConfigurationsUpdate
     * @param linkedAccountSelectiveSyncConfigurationListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selectiveSyncConfigurationsUpdateCall(LinkedAccountSelectiveSyncConfigurationListRequest linkedAccountSelectiveSyncConfigurationListRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = linkedAccountSelectiveSyncConfigurationListRequest;

        // create path and map variables
        String localVarPath = "/selective-sync/configurations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accountTokenAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selectiveSyncConfigurationsUpdateValidateBeforeCall(LinkedAccountSelectiveSyncConfigurationListRequest linkedAccountSelectiveSyncConfigurationListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'linkedAccountSelectiveSyncConfigurationListRequest' is set
        if (linkedAccountSelectiveSyncConfigurationListRequest == null) {
            throw new ApiException("Missing the required parameter 'linkedAccountSelectiveSyncConfigurationListRequest' when calling selectiveSyncConfigurationsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = selectiveSyncConfigurationsUpdateCall(linkedAccountSelectiveSyncConfigurationListRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Replace a linked account&#39;s selective syncs.
     * @param linkedAccountSelectiveSyncConfigurationListRequest  (required)
     * @return List&lt;LinkedAccountSelectiveSyncConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<LinkedAccountSelectiveSyncConfiguration> selectiveSyncConfigurationsUpdate(LinkedAccountSelectiveSyncConfigurationListRequest linkedAccountSelectiveSyncConfigurationListRequest) throws ApiException {
        ApiResponse<List<LinkedAccountSelectiveSyncConfiguration>> localVarResp = selectiveSyncConfigurationsUpdateWithHttpInfo(linkedAccountSelectiveSyncConfigurationListRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Replace a linked account&#39;s selective syncs.
     * @param linkedAccountSelectiveSyncConfigurationListRequest  (required)
     * @return ApiResponse&lt;List&lt;LinkedAccountSelectiveSyncConfiguration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LinkedAccountSelectiveSyncConfiguration>> selectiveSyncConfigurationsUpdateWithHttpInfo(LinkedAccountSelectiveSyncConfigurationListRequest linkedAccountSelectiveSyncConfigurationListRequest) throws ApiException {
        okhttp3.Call localVarCall = selectiveSyncConfigurationsUpdateValidateBeforeCall(linkedAccountSelectiveSyncConfigurationListRequest, null);
        Type localVarReturnType = new TypeToken<List<LinkedAccountSelectiveSyncConfiguration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Replace a linked account&#39;s selective syncs.
     * @param linkedAccountSelectiveSyncConfigurationListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selectiveSyncConfigurationsUpdateAsync(LinkedAccountSelectiveSyncConfigurationListRequest linkedAccountSelectiveSyncConfigurationListRequest, final ApiCallback<List<LinkedAccountSelectiveSyncConfiguration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = selectiveSyncConfigurationsUpdateValidateBeforeCall(linkedAccountSelectiveSyncConfigurationListRequest, _callback);
        Type localVarReturnType = new TypeToken<List<LinkedAccountSelectiveSyncConfiguration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for selectiveSyncMetaList
     * @param commonModel  (optional)
     * @param cursor The pagination cursor value. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selectiveSyncMetaListCall(String commonModel, String cursor, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/selective-sync/meta";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (commonModel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("common_model", commonModel));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accountTokenAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selectiveSyncMetaListValidateBeforeCall(String commonModel, String cursor, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = selectiveSyncMetaListCall(commonModel, cursor, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get metadata for the conditions available to a linked account.
     * @param commonModel  (optional)
     * @param cursor The pagination cursor value. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return PaginatedConditionSchemaList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedConditionSchemaList selectiveSyncMetaList(String commonModel, String cursor, Integer pageSize) throws ApiException {
        ApiResponse<PaginatedConditionSchemaList> localVarResp = selectiveSyncMetaListWithHttpInfo(commonModel, cursor, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Get metadata for the conditions available to a linked account.
     * @param commonModel  (optional)
     * @param cursor The pagination cursor value. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return ApiResponse&lt;PaginatedConditionSchemaList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedConditionSchemaList> selectiveSyncMetaListWithHttpInfo(String commonModel, String cursor, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = selectiveSyncMetaListValidateBeforeCall(commonModel, cursor, pageSize, null);
        Type localVarReturnType = new TypeToken<PaginatedConditionSchemaList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get metadata for the conditions available to a linked account.
     * @param commonModel  (optional)
     * @param cursor The pagination cursor value. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selectiveSyncMetaListAsync(String commonModel, String cursor, Integer pageSize, final ApiCallback<PaginatedConditionSchemaList> _callback) throws ApiException {

        okhttp3.Call localVarCall = selectiveSyncMetaListValidateBeforeCall(commonModel, cursor, pageSize, _callback);
        Type localVarReturnType = new TypeToken<PaginatedConditionSchemaList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
