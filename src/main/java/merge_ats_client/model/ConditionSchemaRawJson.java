
/*
 * Merge ATS API
 * The unified API for building rich integrations with multiple Applicant Tracking System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package merge_ats_client.model;

import java.util.Objects;

import com.google.gson.JsonElement;
import com.google.gson.annotations.SerializedName;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import merge_ats_client.JSON;
import org.threeten.bp.OffsetDateTime;

/**
 * ConditionSchemaRawJson
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-10T20:13:14.599893Z[Etc/UTC]")
public class ConditionSchemaRawJson {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private JsonElement id;

  public static final String SERIALIZED_NAME_COMMON_MODEL = "common_model";
  @SerializedName(SERIALIZED_NAME_COMMON_MODEL)
  private JsonElement commonModel;

  public static final String SERIALIZED_NAME_NATIVE_NAME = "native_name";
  @SerializedName(SERIALIZED_NAME_NATIVE_NAME)
  private JsonElement nativeName;

  public static final String SERIALIZED_NAME_FIELD_NAME = "field_name";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private JsonElement fieldName;

  public static final String SERIALIZED_NAME_IS_UNIQUE = "is_unique";
  @SerializedName(SERIALIZED_NAME_IS_UNIQUE)
  private JsonElement isUnique;

  public static final String SERIALIZED_NAME_CONDITION_TYPE = "condition_type";
  @SerializedName(SERIALIZED_NAME_CONDITION_TYPE)
  private JsonElement conditionType;

  public static final String SERIALIZED_NAME_OPERATORS = "operators";
  @SerializedName(SERIALIZED_NAME_OPERATORS)
  private JsonElement operators;

  private transient JSON serializer;

  public ConditionSchemaRawJson(JSON srlzer) { 
    
    this.serializer = srlzer;
  }

  public ConditionSchemaRawJson id(UUID id) {
    this.id = this.serializer.getGson().toJsonTree(id);
    return this;
  }

   /**
   * The ID of the condition schema. This ID is used when updating selective syncs for a linked account.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the condition schema. This ID is used when updating selective syncs for a linked account.")

  public JsonElement getId() {
    return id;
  }
  public void setId(JsonElement id) {
    this.id = id;
  }

   /**
   * The common model for which a condition schema is defined.
   * @return commonModel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The common model for which a condition schema is defined.")

  public JsonElement getCommonModel() {
    return commonModel;
  }

  public ConditionSchemaRawJson nativeName(String nativeName) {
    this.nativeName = this.serializer.getGson().toJsonTree(nativeName);
    return this;
  }

   /**
   * User-facing *native condition* name. e.g. \&quot;Skip Manager\&quot;.
   * @return nativeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "User-facing *native condition* name. e.g. \"Skip Manager\".")

  public JsonElement getNativeName() {
    return nativeName;
  }
  public void setNativeName(JsonElement nativeName) {
    this.nativeName = nativeName;
  }

  public ConditionSchemaRawJson fieldName(String fieldName) {
    this.fieldName = this.serializer.getGson().toJsonTree(fieldName);
    return this;
  }

   /**
   * The name of the field on the common model that this condition corresponds to, if they conceptually match. e.g. \&quot;location_type\&quot;.
   * @return fieldName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The name of the field on the common model that this condition corresponds to, if they conceptually match. e.g. \"location_type\".")

  public JsonElement getFieldName() {
    return fieldName;
  }
  public void setFieldName(JsonElement fieldName) {
    this.fieldName = fieldName;
  }

  public ConditionSchemaRawJson isUnique(Boolean isUnique) {
    this.isUnique = this.serializer.getGson().toJsonTree(isUnique);
    return this;
  }

   /**
   * Whether this condition can only be applied once. If false, the condition can be AND&#39;d together multiple times.
   * @return isUnique
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether this condition can only be applied once. If false, the condition can be AND'd together multiple times.")

  public JsonElement getIsUnique() {
    return isUnique;
  }
  public void setIsUnique(JsonElement isUnique) {
    this.isUnique = isUnique;
  }

  public ConditionSchemaRawJson conditionType(ConditionTypeEnum conditionType) {
    this.conditionType = this.serializer.getGson().toJsonTree(conditionType);
    return this;
  }

   /**
   * Get conditionType
   * @return conditionType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public JsonElement getConditionType() {
    return conditionType;
  }
  public void setConditionType(JsonElement conditionType) {
    this.conditionType = conditionType;
  }

  public ConditionSchemaRawJson operators(List<OperatorSchema> operators) {
    this.operators = this.serializer.getGson().toJsonTree(operators);
    return this;
  }

   /**
   * The schemas for the operators that can be used on a condition.
   * @return operators
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The schemas for the operators that can be used on a condition.")

  public JsonElement getOperators() {
    return operators;
  }
  public void setOperators(JsonElement operators) {
    this.operators = operators;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConditionSchemaRawJson conditionSchema = (ConditionSchemaRawJson) o;
    return Objects.equals(this.id.getAsString(), conditionSchema.id.getAsString()) &&
        Objects.equals(this.commonModel.getAsString(), conditionSchema.commonModel.getAsString()) &&
        Objects.equals(this.nativeName.getAsString(), conditionSchema.nativeName.getAsString()) &&
        Objects.equals(this.fieldName.getAsString(), conditionSchema.fieldName.getAsString()) &&
        Objects.equals(this.isUnique.getAsString(), conditionSchema.isUnique.getAsString()) &&
        Objects.equals(this.conditionType.getAsString(), conditionSchema.conditionType.getAsString()) &&
        Objects.equals(this.operators.getAsString(), conditionSchema.operators.getAsString());
  }
  @Override
  public int hashCode() {
    return Objects.hash(id, commonModel, nativeName, fieldName, isUnique, conditionType, operators);
  }
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConditionSchemaRawJson {\n");
    sb.append("    id: ").append(toIndentedString(id.getAsString())).append("\n");
    sb.append("    commonModel: ").append(toIndentedString(commonModel.getAsString())).append("\n");
    sb.append("    nativeName: ").append(toIndentedString(nativeName.getAsString())).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName.getAsString())).append("\n");
    sb.append("    isUnique: ").append(toIndentedString(isUnique.getAsString())).append("\n");
    sb.append("    conditionType: ").append(toIndentedString(conditionType.getAsString())).append("\n");
    sb.append("    operators: ").append(toIndentedString(operators.getAsString())).append("\n");
    sb.append("}");
    return sb.toString();
  }
  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}


