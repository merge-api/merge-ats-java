
/*
 * Merge ATS API
 * The unified API for building rich integrations with multiple Applicant Tracking System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package merge_ats_client.model;

import java.util.Objects;

import com.google.gson.JsonElement;
import com.google.gson.annotations.SerializedName;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import merge_ats_client.JSON;
import org.threeten.bp.OffsetDateTime;

/**
 * LinkTokenRawJson
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-10T20:13:14.599893Z[Etc/UTC]")
public class LinkTokenRawJson {
  public static final String SERIALIZED_NAME_LINK_TOKEN = "link_token";
  @SerializedName(SERIALIZED_NAME_LINK_TOKEN)
  private JsonElement linkToken;

  public static final String SERIALIZED_NAME_INTEGRATION_NAME = "integration_name";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_NAME)
  private JsonElement integrationName;

  public static final String SERIALIZED_NAME_MAGIC_LINK_URL = "magic_link_url";
  @SerializedName(SERIALIZED_NAME_MAGIC_LINK_URL)
  private JsonElement magicLinkUrl;

  private transient JSON serializer;

  public LinkTokenRawJson(JSON srlzer) { 
    
    this.serializer = srlzer;
  }

  public LinkTokenRawJson linkToken(String linkToken) {
    this.linkToken = this.serializer.getGson().toJsonTree(linkToken);
    return this;
  }

   /**
   * Get linkToken
   * @return linkToken
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "necdP7FtdASl1fQwm62be2_dM4wBG8_GactqoUV0", required = true, value = "")

  public JsonElement getLinkToken() {
    return linkToken;
  }
  public void setLinkToken(JsonElement linkToken) {
    this.linkToken = linkToken;
  }

  public LinkTokenRawJson integrationName(String integrationName) {
    this.integrationName = this.serializer.getGson().toJsonTree(integrationName);
    return this;
  }

   /**
   * Get integrationName
   * @return integrationName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Lever", value = "")

  public JsonElement getIntegrationName() {
    return integrationName;
  }
  public void setIntegrationName(JsonElement integrationName) {
    this.integrationName = integrationName;
  }

  public LinkTokenRawJson magicLinkUrl(String magicLinkUrl) {
    this.magicLinkUrl = this.serializer.getGson().toJsonTree(magicLinkUrl);
    return this;
  }

   /**
   * Get magicLinkUrl
   * @return magicLinkUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://link.merge.dev/asdfjkl12345jsndfgi2i83n", value = "")

  public JsonElement getMagicLinkUrl() {
    return magicLinkUrl;
  }
  public void setMagicLinkUrl(JsonElement magicLinkUrl) {
    this.magicLinkUrl = magicLinkUrl;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkTokenRawJson linkToken = (LinkTokenRawJson) o;
    return Objects.equals(this.linkToken.getAsString(), linkToken.linkToken.getAsString()) &&
        Objects.equals(this.integrationName.getAsString(), linkToken.integrationName.getAsString()) &&
        Objects.equals(this.magicLinkUrl.getAsString(), linkToken.magicLinkUrl.getAsString());
  }
  @Override
  public int hashCode() {
    return Objects.hash(linkToken, integrationName, magicLinkUrl);
  }
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkTokenRawJson {\n");
    sb.append("    linkToken: ").append(toIndentedString(linkToken.getAsString())).append("\n");
    sb.append("    integrationName: ").append(toIndentedString(integrationName.getAsString())).append("\n");
    sb.append("    magicLinkUrl: ").append(toIndentedString(magicLinkUrl.getAsString())).append("\n");
    sb.append("}");
    return sb.toString();
  }
  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}


